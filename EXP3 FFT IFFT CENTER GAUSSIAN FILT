FFT
import cv2
import numpy as np
import matplotlib.pyplot as plt
path = r'C:\Users\patil’
img2 = cv2.imread(path, 0)
plt.imshow(img2, cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.show()
F = np.fft.fft2(img2)
*centshif F_shifted = np.fft.fftshift(F)
Instead of F put F_shifted*
plt.figure(figsize=(5, 5))
plt.imshow(np.log(np.abs(F)), cmap='gray')
plt.title("Power of Image")
plt.axis('off')
plt.show()

IFFT
import cv2
import numpy as np
import matplotlib.pyplot as plt
path = r'C:\Users\patil’
img2 = cv2.imread(path, 0)
plt.imshow(img2, cmap='gray')
plt.title("Original Image")
plt.axis('off')
plt.show()
G = np.fft.ifftshift(Gshift)
g = np.abs(np.fft.ifft2(G))
plt.figure(figsize=(5, 5))
plt.imshow(g, cmap='gray')
plt.title("Filtered image in spatial domain")
plt.axis('off')
plt.show()


GAUSSIAN 
import cv2
import numpy as np
import matplotlib.pyplot as plt
path = r'C:\Users\patil\’
img2 = cv2.imread(path, 0)
M, N = img2.shape
D0 = 10
H = np.zeros((M, N), dtype=np.float32)
for u in range(M):
    for v in range(N):
        D = np.sqrt((u - M/2)**2 + (v - N/2)**2)
        H[u, v] = np.exp(-D**2 / (2 * D0**2))
plt.figure(figsize=(5, 5))
plt.imshow(H, cmap='gray')
plt.title("Gaussian Low Pass Filter")
plt.axis('off')
plt.show()

